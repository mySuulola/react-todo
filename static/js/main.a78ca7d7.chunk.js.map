{"version":3,"sources":["Components/Todo.js","Components/Project.js","Components/addProject.js","App.js","serviceWorker.js","index.js"],"names":["Todo","id","this","props","onDelete","priority","project","react_default","a","createElement","className","title","duedate","onClick","deleteTodo","bind","Component","Project","newTodos","_this","projects","map","Components_Todo","key","AddProject","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newProject","e","setState","uuid","v4","refs","value","checked","addProject","preventDefault","onSubmit","handleSubmit","type","ref","required","placeholder","Main","todo","todos","push","todoIndex","findIndex","x","splice","handleProject","Components_Project","handleDelete","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a78ca7d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Todo extends Component {\r\n\r\n  deleteTodo (id) {\r\n    this.props.onDelete(id);\r\n  }\r\n\r\n\r\n  render() {\r\n    let priority;\r\n\r\n    if(this.props.project.priority === true) {\r\n      priority = 'Important';\r\n    }\r\n    return (\r\n      <div className=\"todoBox\">\r\n        <strong className='padRightTitle'>{this.props.project.title}</strong>\r\n        <div className='padRight'>due: {this.props.project.duedate}</div>\r\n        <button className='padRightSub' onClick={this.deleteTodo.bind(this, this.props.project.id)}>Delete</button>\r\n        <div className=\"smallStar\">{priority}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\n\r\nclass Project extends Component {\r\n\r\n  deleteTodo(id) {\r\n    this.props.onDelete(id);\r\n  }\r\n \r\n\r\n  render() {\r\n    let newTodos;\r\n    if(this.props.projects) {\r\n      newTodos = this.props.projects.map(project => {\r\n        return (\r\n          <Todo onDelete={this.deleteTodo.bind(this)} key={project.id} project={project} />\r\n        )\r\n      })\r\n    }\r\n    return (\r\n      <div>\r\n        <div>{newTodos}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\n\r\nclass AddProject extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      newProject: {}\r\n    }\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    this.setState({newProject: {\r\n      id: uuid.v4(),\r\n      title: this.refs.title.value,\r\n      duedate: this.refs.duedate.value,\r\n      priority: this.refs.priority.checked\r\n    }},\r\n    function() {\r\n      this.props.addProject(this.state.newProject);\r\n    });\r\n\r\n    e.preventDefault();\r\n    this.refs.title.value = '';\r\n    this.refs.duedate.value = '';\r\n    this.refs.priority.checked = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Add New Todo</h3>\r\n          <form className=\"submitForm\" onSubmit={this.handleSubmit.bind(this)}>\r\n            <div>\r\n              <label className=\"pad\">Title</label>\r\n              <input className=\"padBox\" type=\"text\" ref=\"title\" required/>\r\n              <br></br>\r\n              <label className=\"pad\">Due Date</label>\r\n              <input className=\"padBox\" type=\"date\" ref=\"duedate\" required/>\r\n              <br></br>\r\n              <label className=\"pad\">Important</label>\r\n              <input className=\"pad\" type=\"checkbox\" ref=\"priority\"/>\r\n            </div>\r\n            <input className=\"submit\" type=\"Submit\" placeholder=\"Submit\" />\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddProject;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport uuid from 'uuid';\r\nimport Project from './Components/Project';\r\nimport AddProject from './Components/addProject';\r\n\r\n\r\n\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      projects: [],\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({projects: [\r\n      {\r\n        id: uuid.v4(),\r\n        title: 'Wash Dishes',\r\n        duedate: '2017-04-02',\r\n        priority: false,\r\n      },\r\n      {\r\n        id: uuid.v4(),\r\n        title: 'Learn React.js',\r\n        duedate: '2018-12-18',\r\n        priority: true,\r\n      },\r\n      {\r\n        id: uuid.v4(),\r\n        title: 'Feed Cat',\r\n        duedate: '2019-06-28',\r\n        priority: false,\r\n      },\r\n    ]});\r\n\r\n  }\r\n\r\n  handleProject(todo) {\r\n    let todos = this.state.projects;\r\n    todos.push(todo);\r\n    this.setState({projects: todos});\r\n  }\r\n  handleDelete(id) {\r\n    let todos = this.state.projects;\r\n    let todoIndex = todos.findIndex(x => x.id === id);\r\n    todos.splice(todoIndex, 1);\r\n    this.setState({projects: todos});\r\n  } \r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"fRight\">\r\n          <AddProject addProject={this.handleProject.bind(this)} />\r\n        </div> \r\n        <Project onDelete={this.handleDelete.bind(this)} projects={this.state.projects} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Main/>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}